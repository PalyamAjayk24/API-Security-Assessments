# 1. Broken Object Level Authorization (BOLA)

---

## üß† What is BOLA?

**BOLA** (Broken Object Level Authorization) occurs when an API **does not properly check** whether a user has permission to access or change a specific item (called an "object").

An object can be:
- A **user's profile** (personal details, settings)
- An **order** (a product purchase, transaction)
- A **message** (email, chat, notification)
- A **file** (document, image)

This means a user can simply **change the object ID** (usually in the URL or request) and **access someone else‚Äôs data**. The API fails to stop the user from seeing or modifying this data.

---

## üî• Why is BOLA Dangerous?

Without proper checks, anyone can **access, modify, or delete someone else's data** just by changing the object ID in the URL. This can lead to:

- **Data leaks**: Users can see sensitive information that isn‚Äôt theirs.
- **Account takeover**: Users can change someone else‚Äôs account details.
- **Fraud**: Malicious users can manipulate or misuse others‚Äô information.
- **Loss of trust**: Leaking private data can damage the reputation of your app or company.
- **Compliance issues**: Violates data protection laws like GDPR, HIPAA, etc.

---

## üß™ How Does BOLA Work?

Here‚Äôs a simple example of how **BOLA** works:

1. **User A** is logged in and makes a request to view their order:

GET /api/orders/1001

2. The API does not check if User A is the actual owner of order 1001.

3. User A changes the order ID in the URL:
GET /api/orders/1002

4. If the API responds with data from order 1002 (which belongs to User B), then BOLA exists.


üõ†Ô∏è How to Recognize BOLA
You can often identify BOLA by:
‚Ä¢	Logging in as a regular user
‚Ä¢	Finding an API endpoint that uses an ID (e.g. /users/123, /orders/456)
‚Ä¢	Changing that ID to another number or object ID
‚Ä¢	Checking if the API allows access to data that shouldn‚Äôt belong to your account
If yes, the API is not checking object ownership properly ‚Äî that‚Äôs a BOLA vulnerability.




üö® Impact
‚Ä¢	Unauthorized access to personal or sensitive user data
‚Ä¢	Unauthorized modification or deletion of other users‚Äô resources
‚Ä¢	Escalation to full account compromise
‚Ä¢	Reputation damage and legal penalties for insecure systems



‚úÖ Recommendation (Fix)
To prevent BOLA:
1.	Always check object ownership on the server-side.
o	The backend must verify that the logged-in user owns the object they‚Äôre trying to access.
2.	Never rely only on frontend restrictions like hiding buttons or links.
3.	Use access control checks consistently on every API endpoint.
4.	Avoid exposing predictable IDs (use UUIDs if possible, but still check ownership!).
5.	Apply least privilege and role-based access control (RBAC) where needed.
